generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByAggregateGroup", "selectRelationCount", "referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  authorId    Int
  image       String?   @default("https://wallpapercave.com/wp/PDI4CCU.jpg")
  author      User      @relation("UserArticles", fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  tagList     Tag[]
  favoritedBy User[]    @relation("UserFavoriteArticles")
}

model Pitcher {
  name              String    @db.VarChar(20)
  team              String?   @db.VarChar(20)
  wins              Int?
  losses            Int?
  era               Decimal?  @db.Decimal
  games             Int?
  games_started     Int?
  saves             Int?
  innings_pitched   Decimal?  @db.Decimal
  hits              Int?
  earned_runs       Int?
  home_runs_allowed Int?
  strikeouts        Int?
  walks             Int?
  whip              Decimal?  @db.Decimal
  ks_per_nine       Decimal?  @db.Decimal
  walks_per_nine    Decimal?  @db.Decimal
  fip               Decimal?  @db.Decimal
  war               Decimal?  @db.Decimal
  ra_nine_war       Decimal?  @db.Decimal
  adp               Decimal?  @db.Decimal
  id                Int       @id
  comments          Comment[]
  favoritedBy       User[]    @relation("UserFavoritePitchers")
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  body      String
  articleId Int
  authorId  Int
  pitcherId Int
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  pitcher   Pitcher  @relation(fields: [pitcherId], references: [id], onDelete: Cascade)
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

model User {
  id               Int       @id @default(autoincrement())
  email            String    @unique
  username         String    @unique
  password         String
  image            String?   @default("https://wallpapercave.com/wp/PDI4CCU.jpg")
  bio              String?
  articles         Article[] @relation("UserArticles")
  comments         Comment[]
  favoriteArticles Article[] @relation("UserFavoriteArticles")
  favoritePitchers Pitcher[] @relation("UserFavoritePitchers")
  User_B           User[]    @relation("UserFollows")
  User_A           User[]    @relation("UserFollows")
}
